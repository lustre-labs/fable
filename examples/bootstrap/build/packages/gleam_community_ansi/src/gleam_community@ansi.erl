-module(gleam_community@ansi).
-compile([no_auto_import, nowarn_unused_vars, nowarn_unused_function, nowarn_nomatch]).

-export([strip/1, reset/1, bold/1, dim/1, italic/1, underline/1, inverse/1, hidden/1, strikethrough/1, black/1, red/1, green/1, yellow/1, blue/1, magenta/1, cyan/1, white/1, bright_black/1, grey/1, gray/1, bright_red/1, bright_green/1, bright_yellow/1, bright_blue/1, bright_magenta/1, bright_cyan/1, bright_white/1, pink/1, hex/2, colour/2, color/2, bg_black/1, bg_red/1, bg_green/1, bg_yellow/1, bg_blue/1, bg_magenta/1, bg_cyan/1, bg_white/1, bg_bright_black/1, bg_bright_red/1, bg_bright_green/1, bg_bright_yellow/1, bg_bright_blue/1, bg_bright_magenta/1, bg_bright_cyan/1, bg_bright_white/1, bg_pink/1, bg_hex/2, bg_colour/2, bg_color/2]).
-export_type([code/0]).

-if(?OTP_RELEASE >= 27).
-define(MODULEDOC(Str), -moduledoc(Str)).
-define(DOC(Str), -doc(Str)).
-else.
-define(MODULEDOC(Str), -compile([])).
-define(DOC(Str), -compile([])).
-endif.

?MODULEDOC(
    "\n"
    " - **Text style**\n"
    "   - [`bold`](#bold)\n"
    "   - [`italic`](#italic)\n"
    "   - [`underline`](#underline)\n"
    "   - [`strikethrough`](#strikethrough)\n"
    "   - [`inverse`](#inverse)\n"
    "   - [`dim`](#dim)\n"
    "   - [`hidden`](#hidden)\n"
    "   - [`reset`](#reset)\n"
    " - **Text colour**\n"
    "   - [`black`](#black)\n"
    "   - [`red`](#red)\n"
    "   - [`green`](#green)\n"
    "   - [`yellow`](#yellow)\n"
    "   - [`blue`](#blue)\n"
    "   - [`magenta`](#magenta)\n"
    "   - [`cyan`](#cyan)\n"
    "   - [`white`](#white)\n"
    "   - [`pink`](#pink)\n"
    "   - [`grey`](#grey)\n"
    "   - [`gray`](#gray)\n"
    "   - [`bright_black`](#bright_black)\n"
    "   - [`bright_red`](#bright_red)\n"
    "   - [`bright_green`](#bright_green)\n"
    "   - [`bright_yellow`](#bright_yellow)\n"
    "   - [`bright_blue`](#bright_blue)\n"
    "   - [`bright_magenta`](#bright_magenta)\n"
    "   - [`bright_cyan`](#bright_cyan)\n"
    "   - [`bright_white`](#bright_white)\n"
    "   - [`hex`](#hex)\n"
    "   - [`colour`](#colour)\n"
    "   - [`color`](#color)\n"
    " - **Background colour**\n"
    "   - [`bg_black`](#bg_black)\n"
    "   - [`bg_red`](#bg_red)\n"
    "   - [`bg_green`](#bg_green)\n"
    "   - [`bg_yellow`](#bg_yellow)\n"
    "   - [`bg_blue`](#bg_blue)\n"
    "   - [`bg_magenta`](#bg_magenta)\n"
    "   - [`bg_cyan`](#bg_cyan)\n"
    "   - [`bg_white`](#bg_white)\n"
    "   - [`bg_pink`](#bg_pink)\n"
    "   - [`bg_bright_black`](#bg_bright_black)\n"
    "   - [`bg_bright_red`](#bg_bright_red)\n"
    "   - [`bg_bright_green`](#bg_bright_green)\n"
    "   - [`bg_bright_yellow`](#bg_bright_yellow)\n"
    "   - [`bg_bright_blue`](#bg_bright_blue)\n"
    "   - [`bg_bright_magenta`](#bg_bright_magenta)\n"
    "   - [`bg_bright_cyan`](#bg_bright_cyan)\n"
    "   - [`bg_bright_white`](#bg_bright_white)\n"
    "   - [`bg_hex`](#bg_hex)\n"
    "   - [`bg_colour`](#bg_colour)\n"
    "   - [`bg_color`](#bg_color)\n"
    " - **Utilities**\n"
    "   - [`strip`](#strip)\n"
    "\n"
    " ---\n"
    "\n"
    " This package was heavily inspired by the `colors` module in the Deno standard\n"
    " library. The original source code can be found\n"
    " <a href=\"https://deno.land/std@0.167.0/fmt/colors.ts\">here</a>.\n"
    "\n"
    " <details>\n"
    " <summary>The license of that package is produced below:</summary>\n"
    "\n"
    "\n"
    " > MIT License\n"
    "\n"
    " > Copyright 2018-2022 the Deno authors.\n"
    "\n"
    " > Permission is hereby granted, free of charge, to any person obtaining a copy\n"
    " of this software and associated documentation files (the \"Software\"), to deal\n"
    " in the Software without restriction, including without limitation the rights\n"
    " to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n"
    " copies of the Software, and to permit persons to whom the Software is\n"
    " furnished to do so, subject to the following conditions:\n"
    "\n"
    " > The above copyright notice and this permission notice shall be included in all\n"
    " copies or substantial portions of the Software.\n"
    " </details>\n"
    "\n"
).

-type code() :: {code, binary(), binary(), binary()}.

-file("src/gleam_community/ansi.gleam", 129).
?DOC(" Applies colour and background based on colour code and its associated text\n").
-spec run(binary(), code()) -> binary().
run(Text, Code) ->
    <<<<(erlang:element(2, Code))/binary,
            (gleam@string:replace(
                Text,
                erlang:element(4, Code),
                erlang:element(2, Code)
            ))/binary>>/binary,
        (erlang:element(3, Code))/binary>>.

-file("src/gleam_community/ansi.gleam", 2344).
?DOC(
    " Strips the ansi control characters from the text.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   let bold_lucy = ansi.bold(\"lucy\")\n"
    "   // => \"\\x1B[1mlucy\\x1B[22m\"\n"
    "   ansi.strip(bold_lucy)\n"
    "   // => \"lucy\"\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"lucy\" is boldened by `ansi.bold` and then converted back to the original\n"
    " string with `ansi.strip`.\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec strip(binary()) -> binary().
strip(Text) ->
    Regexp_options = {options, false, true},
    _assert_subject = gleam@regexp:compile(
        <<"(?:\\[(?:\\d+;?)+m)+"/utf8>>,
        Regexp_options
    ),
    {ok, R} = case _assert_subject of
        {ok, _} -> _assert_subject;
        _assert_fail ->
            erlang:error(#{gleam_error => let_assert,
                        message => <<"Pattern match failed, no pattern matched the value."/utf8>>,
                        value => _assert_fail,
                        module => <<"gleam_community/ansi"/utf8>>,
                        function => <<"strip"/utf8>>,
                        line => 2346})
    end,
    _pipe = R,
    _pipe@1 = gleam@regexp:split(_pipe, Text),
    gleam@string:join(_pipe@1, <<""/utf8>>).

-file("src/gleam_community/ansi.gleam", 117).
?DOC(" Builds colour code\n").
-spec code(list(integer()), integer()) -> code().
code(Open, Close) ->
    Close_str = erlang:integer_to_binary(Close),
    Open_strs = gleam@list:map(Open, fun erlang:integer_to_binary/1),
    {code,
        <<<<<<"\x{001b}"/utf8, "["/utf8>>/binary,
                (gleam@string:join(Open_strs, <<";"/utf8>>))/binary>>/binary,
            "m"/utf8>>,
        <<<<<<"\x{001b}"/utf8, "["/utf8>>/binary, Close_str/binary>>/binary,
            "m"/utf8>>,
        <<<<<<"\x{001b}"/utf8, "["/utf8>>/binary, Close_str/binary>>/binary,
            "m"/utf8>>}.

-file("src/gleam_community/ansi.gleam", 136).
?DOC(" Reset the text modified\n").
-spec reset(binary()) -> binary().
reset(Text) ->
    run(Text, code([0], 0)).

-file("src/gleam_community/ansi.gleam", 182).
?DOC(
    " Style the given text bold.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.bold(\"lucy\")\n"
    "   // => \"\\x1B[1mlucy\\x1B[22m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[22m\"` added to the string. This is the escape code\n"
    " for the \"default\" bold/dim style of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " style, it will use both the outter style and the inner style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.dim(\"Isn't \" <> ansi.bold(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be dim but the text \"fun?\" will be\n"
    " both underlined, *and* bold!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bold(binary()) -> binary().
bold(Text) ->
    run(Text, code([1], 22)).

-file("src/gleam_community/ansi.gleam", 228).
?DOC(
    " Style the given text's colour to be dimmer.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.dim(\"lucy\")\n"
    "   // => \"\\x1B[2mlucy\\x1B[22m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[22m\"` added to the string. This is the escape code\n"
    " for the \"default\" bold/dim style of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " style, it will use both the outter style and the inner style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.dim(\"Isn't \" <> ansi.bold(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be dim but the text \"fun?\" will be\n"
    " both underlined, *and* bold!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec dim(binary()) -> binary().
dim(Text) ->
    run(Text, code([2], 22)).

-file("src/gleam_community/ansi.gleam", 274).
?DOC(
    " Style the given text italic.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.italic(\"lucy\")\n"
    "   // => \"\\x1B[3mlucy\\x1B[23m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[23m\"` added to the string. This is the escape code\n"
    " for the \"default\" italic style of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " style, it will use both the outter style and the inner style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.underline(\"Isn't \" <> ansi.bold(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be underlined but the text \"fun?\" will be\n"
    " both underlined, *and* bold!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec italic(binary()) -> binary().
italic(Text) ->
    run(Text, code([3], 23)).

-file("src/gleam_community/ansi.gleam", 320).
?DOC(
    " Style the given text's colour to be dimmer.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.underline(\"lucy\")\n"
    "   // => \"\\x1B[4mlucy\\x1B[24m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[24m\"` added to the string. This is the escape code\n"
    " for the \"default\" underline style of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " style, it will use both the outter style and the inner style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.dim(\"Isn't \" <> ansi.bold(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be dim but the text \"fun?\" will be\n"
    " both underlined, *and* bold!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec underline(binary()) -> binary().
underline(Text) ->
    run(Text, code([4], 24)).

-file("src/gleam_community/ansi.gleam", 366).
?DOC(
    " Inverse the given text's colour, and background colour.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.inverse(\"lucy\")\n"
    "   // => \"\\x1B[7mlucy\\x1B[27m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[27m\"` added to the string. This is the escape code\n"
    " for the \"default\" inverse style of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " style, it will use both the outter style and the inner style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.dim(\"Isn't \" <> ansi.bold(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be dim but the text \"fun?\" will be\n"
    " both underlined, *and* bold!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec inverse(binary()) -> binary().
inverse(Text) ->
    run(Text, code([7], 27)).

-file("src/gleam_community/ansi.gleam", 412).
?DOC(
    " Style the given text to be hidden.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.hidden(\"lucy\")\n"
    "   // => \"\\x1B[8mlucy\\x1B[28m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[28m\"` added to the string. This is the escape code\n"
    " for the \"default\" hidden style of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " style, it will use both the outter style and the inner style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.dim(\"Isn't \" <> ansi.bold(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be dim but the text \"fun?\" will be\n"
    " both underlined, *and* bold!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec hidden(binary()) -> binary().
hidden(Text) ->
    run(Text, code([8], 28)).

-file("src/gleam_community/ansi.gleam", 458).
?DOC(
    " Style the given text to be striked through.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.strikethrough(\"lucy\")\n"
    "   // => \"\\x1B[9mlucy\\x1B[29m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[29m\"` added to the string. This is the escape code\n"
    " for the \"default\" strikethrough style of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " style, it will use both the outter style and the inner style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.dim(\"Isn't \" <> ansi.bold(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be dim but the text \"fun?\" will be\n"
    " both underlined, *and* bold!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec strikethrough(binary()) -> binary().
strikethrough(Text) ->
    run(Text, code([9], 29)).

-file("src/gleam_community/ansi.gleam", 506).
?DOC(
    " Colour the given text black.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.black(\"lucy\")\n"
    "   // => \"\\x1B[30mlucy\\x1B[39m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[39m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec black(binary()) -> binary().
black(Text) ->
    run(Text, code([30], 39)).

-file("src/gleam_community/ansi.gleam", 552).
?DOC(
    " Colour the given text red.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.red(\"lucy\")\n"
    "   // => \"\\x1B[31mlucy\\x1B[39m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[39m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec red(binary()) -> binary().
red(Text) ->
    run(Text, code([31], 39)).

-file("src/gleam_community/ansi.gleam", 598).
?DOC(
    " Colour the given text green.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.green(\"lucy\")\n"
    "   // => \"\\x1B[32mlucy\\x1B[39m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[39m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec green(binary()) -> binary().
green(Text) ->
    run(Text, code([32], 39)).

-file("src/gleam_community/ansi.gleam", 644).
?DOC(
    " Colour the given text yellow.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"lucy\")\n"
    "   // => \"\\x1B[33mlucy\\x1B[39m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[39m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec yellow(binary()) -> binary().
yellow(Text) ->
    run(Text, code([33], 39)).

-file("src/gleam_community/ansi.gleam", 690).
?DOC(
    " Colour the given text blue.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.blue(\"lucy\")\n"
    "   // => \"\\x1B[34mlucy\\x1B[39m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[39m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec blue(binary()) -> binary().
blue(Text) ->
    run(Text, code([34], 39)).

-file("src/gleam_community/ansi.gleam", 736).
?DOC(
    " Colour the given text magenta.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.magenta(\"lucy\")\n"
    "   // => \"\\x1B[35mlucy\\x1B[39m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[39m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec magenta(binary()) -> binary().
magenta(Text) ->
    run(Text, code([35], 39)).

-file("src/gleam_community/ansi.gleam", 782).
?DOC(
    " Colour the given text cyan.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.cyan(\"lucy\")\n"
    "   // => \"\\x1B[36mlucy\\x1B[39m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[39m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec cyan(binary()) -> binary().
cyan(Text) ->
    run(Text, code([36], 39)).

-file("src/gleam_community/ansi.gleam", 828).
?DOC(
    " Colour the given text white.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.white(\"lucy\")\n"
    "   // => \"\\x1B[37mlucy\\x1B[39m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[39m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec white(binary()) -> binary().
white(Text) ->
    run(Text, code([37], 39)).

-file("src/gleam_community/ansi.gleam", 928).
?DOC(
    " Colour the given text bright black. This should increase the luminosity of\n"
    " the base colour, but some terminals will interpret this as bold instead.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.bright_black(\"lucy\")\n"
    "   // => \"\\x1B[90mlucy\\x1B[39m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[39m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bright_black(binary()) -> binary().
bright_black(Text) ->
    run(Text, code([90], 39)).

-file("src/gleam_community/ansi.gleam", 874).
?DOC(
    " Colour the given text gray.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.gray(\"lucy\")\n"
    "   // => \"\\x1B[90mlucy\\x1B[39m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[39m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec grey(binary()) -> binary().
grey(Text) ->
    bright_black(Text).

-file("src/gleam_community/ansi.gleam", 881).
?DOC(
    " This is an alias for [`grey`](#grey) for those who prefer the American English\n"
    " spelling.\n"
).
-spec gray(binary()) -> binary().
gray(Text) ->
    bright_black(Text).

-file("src/gleam_community/ansi.gleam", 975).
?DOC(
    " Colour the given text bright red. This should increase the luminosity of\n"
    " the base colour, but some terminals will interpret this as bold instead.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.bright_red(\"lucy\")\n"
    "   // => \"\\x1B[91mlucy\\x1B[39m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[39m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bright_red(binary()) -> binary().
bright_red(Text) ->
    run(Text, code([91], 39)).

-file("src/gleam_community/ansi.gleam", 1020).
?DOC(
    " Colour the given text bright green. This should increase the luminosity of\n"
    " the base colour, but some terminals will interpret this as bold instead.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " fn example() {\n"
    "   ansi.bright_green(\"lucy\")\n"
    "   // => \"\\x1B[92mlucy\\x1B[39m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[39m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bright_green(binary()) -> binary().
bright_green(Text) ->
    run(Text, code([92], 39)).

-file("src/gleam_community/ansi.gleam", 1065).
?DOC(
    " Colour the given text bright yellow. This should increase the luminosity of\n"
    " the base colour, but some terminals will interpret this as bold instead.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " fn example() {\n"
    "   ansi.bright_yellow(\"lucy\")\n"
    "   // => \"\\x1B[93mlucy\\x1B[39m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[39m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bright_yellow(binary()) -> binary().
bright_yellow(Text) ->
    run(Text, code([93], 39)).

-file("src/gleam_community/ansi.gleam", 1110).
?DOC(
    " Colour the given text bright blue. This should increase the luminosity of\n"
    " the base colour, but some terminals will interpret this as bold instead.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " fn example() {\n"
    "   ansi.bright_blue(\"lucy\")\n"
    "   // => \"\\x1B[94mlucy\\x1B[39m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[39m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bright_blue(binary()) -> binary().
bright_blue(Text) ->
    run(Text, code([94], 39)).

-file("src/gleam_community/ansi.gleam", 1155).
?DOC(
    " Colour the given text bright gremagentaen. This should increase the luminosity\n"
    " of the base colour, but some terminals will interpret this as bold instead.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " fn example() {\n"
    "   ansi.bright_magenta(\"lucy\")\n"
    "   // => \"\\x1B[95mlucy\\x1B[39m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[39m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bright_magenta(binary()) -> binary().
bright_magenta(Text) ->
    run(Text, code([95], 39)).

-file("src/gleam_community/ansi.gleam", 1200).
?DOC(
    " Colour the given text bright cyan. This should increase the luminosity of\n"
    " the base colour, but some terminals will interpret this as bold instead.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " fn example() {\n"
    "   ansi.bright_cyan(\"lucy\")\n"
    "   // => \"\\x1B[96mlucy\\x1B[39m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[39m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bright_cyan(binary()) -> binary().
bright_cyan(Text) ->
    run(Text, code([96], 39)).

-file("src/gleam_community/ansi.gleam", 1245).
?DOC(
    " Colour the given text bright white. This should increase the luminosity of\n"
    " the base colour, but some terminals will interpret this as bold instead.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " fn example() {\n"
    "   ansi.bright_white(\"lucy\")\n"
    "   // => \"\\x1B[97mlucy\\x1B[39m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[39m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bright_white(binary()) -> binary().
bright_white(Text) ->
    run(Text, code([97], 39)).

-file("src/gleam_community/ansi.gleam", 1291).
?DOC(
    " Colour the given text pink.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.pink(\"lucy\")\n"
    "   // => \"\\x1B[38;5;219mlucy\\x1B[39m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[39m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec pink(binary()) -> binary().
pink(Text) ->
    run(Text, code([38, 5, 219], 39)).

-file("src/gleam_community/ansi.gleam", 1342).
?DOC(
    " Colour the given text the given colour represented by a hex `Int`.\n"
    "\n"
    " The given hex Int can be any valid [shorthand hexadecimal form](https://en.wikipedia.org/wiki/Web_colors#Shorthand_hexadecimal_form).\n"
    "\n"
    " ‚ùóÔ∏è Note that if supplied hex Int is less than 0 or larger than 0xfffff the\n"
    " colour will be set to black and white respectively.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.hex(\"lucy\", 0xffaff3)\n"
    "   // => \"\\x1B[38;2;255;175;243mlucy\\x1B[39m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[49m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec hex(binary(), integer()) -> binary().
hex(Text, Colour) ->
    Colour@1 = gleam@int:clamp(Colour, 16#0, 16#ffffff),
    run(
        Text,
        code(
            [38,
                2,
                begin
                    _pipe = erlang:'bsr'(Colour@1, 16),
                    erlang:'band'(_pipe, 16#ff)
                end,
                begin
                    _pipe@1 = erlang:'bsr'(Colour@1, 8),
                    erlang:'band'(_pipe@1, 16#ff)
                end,
                erlang:'band'(Colour@1, 16#ff)],
            39
        )
    ).

-file("src/gleam_community/ansi.gleam", 1405).
?DOC(
    " Colour the given text the given colour represented by a `Colour`.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    " import gleam_community/colour.{Colour}\n"
    "\n"
    " fn example() {\n"
    "   let pink = colour.from_hsl(0.8583, 1.0, 0,84)\n"
    "   ansi.colour(\"lucy\", pink)\n"
    "   // => \"\\x1B[48;2;255;175;243mlucy\\x1B[49m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[49m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec colour(binary(), gleam_community@colour:colour()) -> binary().
colour(Text, Colour) ->
    Hex_colour = gleam_community@colour:to_rgb_hex(Colour),
    hex(Text, Hex_colour).

-file("src/gleam_community/ansi.gleam", 1413).
?DOC(
    " This is an alias for [`colour`](#colour) for those who prefer the American English\n"
    " spelling.\n"
).
-spec color(binary(), gleam_community@colour:colour()) -> binary().
color(Text, Color) ->
    colour(Text, Color).

-file("src/gleam_community/ansi.gleam", 1461).
?DOC(
    " Colour the given text's background black.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.bg_black(\"lucy\")\n"
    "   // => \"\\x1B[40mlucy\\x1B[49m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[49m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bg_black(binary()) -> binary().
bg_black(Text) ->
    run(Text, code([40], 49)).

-file("src/gleam_community/ansi.gleam", 1507).
?DOC(
    " Colour the given text's background red.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.bg_red(\"lucy\")\n"
    "   // => \"\\x1B[41mlucy\\x1B[49m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[49m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bg_red(binary()) -> binary().
bg_red(Text) ->
    run(Text, code([41], 49)).

-file("src/gleam_community/ansi.gleam", 1553).
?DOC(
    " Colour the given text's background green.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.bg_green(\"lucy\")\n"
    "   // => \"\\x1B[42mlucy\\x1B[49m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[49m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bg_green(binary()) -> binary().
bg_green(Text) ->
    run(Text, code([42], 49)).

-file("src/gleam_community/ansi.gleam", 1599).
?DOC(
    " Colour the given text's background yellow.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.bg_yellow(\"lucy\")\n"
    "   // => \"\\x1B[43mlucy\\x1B[49m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[49m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bg_yellow(binary()) -> binary().
bg_yellow(Text) ->
    run(Text, code([43], 49)).

-file("src/gleam_community/ansi.gleam", 1645).
?DOC(
    " Colour the given text's background blue.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.bg_blue(\"lucy\")\n"
    "   // => \"\\x1B[44mlucy\\x1B[49m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[49m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bg_blue(binary()) -> binary().
bg_blue(Text) ->
    run(Text, code([44], 49)).

-file("src/gleam_community/ansi.gleam", 1691).
?DOC(
    " Colour the given text's background magenta.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.bg_magenta(\"lucy\")\n"
    "   // => \"\\x1B[45mlucy\\x1B[49m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[49m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bg_magenta(binary()) -> binary().
bg_magenta(Text) ->
    run(Text, code([45], 49)).

-file("src/gleam_community/ansi.gleam", 1737).
?DOC(
    " Colour the given text's background cyan.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.bg_cyan(\"lucy\")\n"
    "   // => \"\\x1B[46mlucy\\x1B[49m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[49m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bg_cyan(binary()) -> binary().
bg_cyan(Text) ->
    run(Text, code([46], 49)).

-file("src/gleam_community/ansi.gleam", 1783).
?DOC(
    " Colour the given text's background white.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.bg_white(\"lucy\")\n"
    "   // => \"\\x1B[47mlucy\\x1B[49m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[49m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bg_white(binary()) -> binary().
bg_white(Text) ->
    run(Text, code([47], 49)).

-file("src/gleam_community/ansi.gleam", 1829).
?DOC(
    " Colour the given text's background bright black.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.bg_bright_black(\"lucy\")\n"
    "   // => \"\\x1B[100mlucy\\x1B[49m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[49m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bg_bright_black(binary()) -> binary().
bg_bright_black(Text) ->
    run(Text, code([100], 49)).

-file("src/gleam_community/ansi.gleam", 1875).
?DOC(
    " Colour the given text's background bright red.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.bg_bright_red(\"lucy\")\n"
    "   // => \"\\x1B[101mlucy\\x1B[49m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[49m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bg_bright_red(binary()) -> binary().
bg_bright_red(Text) ->
    run(Text, code([101], 49)).

-file("src/gleam_community/ansi.gleam", 1921).
?DOC(
    " Colour the given text's background bright green.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.bg_bright_green(\"lucy\")\n"
    "   // => \"\\x1B[102mlucy\\x1B[49m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[49m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bg_bright_green(binary()) -> binary().
bg_bright_green(Text) ->
    run(Text, code([102], 49)).

-file("src/gleam_community/ansi.gleam", 1967).
?DOC(
    " Colour the given text's background bright yellow.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.bg_bright_yellow(\"lucy\")\n"
    "   // => \"\\x1B[103mlucy\\x1B[49m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[49m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bg_bright_yellow(binary()) -> binary().
bg_bright_yellow(Text) ->
    run(Text, code([103], 49)).

-file("src/gleam_community/ansi.gleam", 2013).
?DOC(
    " Colour the given text's background bright blue.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.bg_bright_blue(\"lucy\")\n"
    "   // => \"\\x1B[104mlucy\\x1B[49m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[49m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bg_bright_blue(binary()) -> binary().
bg_bright_blue(Text) ->
    run(Text, code([104], 49)).

-file("src/gleam_community/ansi.gleam", 2059).
?DOC(
    " Colour the given text's background bright magenta.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.bg_bright_magenta(\"lucy\")\n"
    "   // => \"\\x1B[105mlucy\\x1B[49m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[49m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bg_bright_magenta(binary()) -> binary().
bg_bright_magenta(Text) ->
    run(Text, code([105], 49)).

-file("src/gleam_community/ansi.gleam", 2105).
?DOC(
    " Colour the given text's background bright cyan.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.bg_bright_cyan(\"lucy\")\n"
    "   // => \"\\x1B[106mlucy\\x1B[49m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[49m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bg_bright_cyan(binary()) -> binary().
bg_bright_cyan(Text) ->
    run(Text, code([106], 49)).

-file("src/gleam_community/ansi.gleam", 2151).
?DOC(
    " Colour the given text's background bright white.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.bg_bright_white(\"lucy\")\n"
    "   // => \"\\x1B[107mlucy\\x1B[49m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[49m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bg_bright_white(binary()) -> binary().
bg_bright_white(Text) ->
    run(Text, code([107], 49)).

-file("src/gleam_community/ansi.gleam", 2197).
?DOC(
    " Colour the given text's background pink.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.bg_pink(\"lucy\")\n"
    "   // => \"\\x1B[48;5;219mlucy\\x1B[49m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[49m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bg_pink(binary()) -> binary().
bg_pink(Text) ->
    run(Text, code([48, 5, 219], 49)).

-file("src/gleam_community/ansi.gleam", 2248).
?DOC(
    " Colour the given text's background the given colour represented by a hex `Int`.\n"
    "\n"
    " The given hex Int can be any valid [shorthand hexadecimal form](https://en.wikipedia.org/wiki/Web_colors#Shorthand_hexadecimal_form).\n"
    "\n"
    " ‚ùóÔ∏è Note that if supplied hex Int is less than 0 or larger than 0xfffff the\n"
    " colour will be set to black and white respectively.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.hex(\"lucy\", 0xffaff3)\n"
    "   // => \"\\x1B[48;2;255;175;243mlucy\\x1B[49m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[49m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bg_hex(binary(), integer()) -> binary().
bg_hex(Text, Colour) ->
    run(
        Text,
        code(
            [48,
                2,
                begin
                    _pipe = erlang:'bsr'(Colour, 16),
                    erlang:'band'(_pipe, 16#ff)
                end,
                begin
                    _pipe@1 = erlang:'bsr'(Colour, 8),
                    erlang:'band'(_pipe@1, 16#ff)
                end,
                erlang:'band'(Colour, 16#ff)],
            49
        )
    ).

-file("src/gleam_community/ansi.gleam", 2310).
?DOC(
    " Colour the given text's background with the given colour represented by a `Colour`.\n"
    "\n"
    " <details>\n"
    " <summary>Example:</summary>\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    " import gleam_community/colour.{Colour}\n"
    "\n"
    " fn example() {\n"
    "   let pink = colour.from_hsl(0.8583, 1.0, 0,84)\n"
    "   ansi.bg_colour(\"lucy\", pink)\n"
    "   // => \"\\x1B[48;2;255;175;243mlucy\\x1B[49m\"\n"
    " }\n"
    " ```\n"
    "\n"
    " ‚ùóÔ∏è Note the trailing `\"\\x1B[49m\"` added to the string. This is the escape code\n"
    " for the \"default\" colour of the terminal. This means text you write after\n"
    " this will revert back to default.\n"
    "\n"
    " ‚ú® `gleam_community/ansi` is smart about nested styles; instead of using the default\n"
    " colour, it will use the colour of the outter style.\n"
    "\n"
    " ```gleam\n"
    " import gleam_community/ansi\n"
    "\n"
    " fn example() {\n"
    "   ansi.yellow(\"Isn't \" <> ansi.pink(\"Gleam\") <> \" fun?\")\n"
    " }\n"
    " ```\n"
    "\n"
    " In this example, the text \"Gleam\" will be pink but the text \"fun?\" will be\n"
    " yellow, *not* the default colour!\n"
    " </details>\n"
    "\n"
    " <div style=\"position: relative;\">\n"
    "     <a style=\"position: absolute; left: 0;\" href=\"https://github.com/gleam-community/ansi/issues\">\n"
    "         <small>Spot a typo? Open an issue!</small>\n"
    "     </a>\n"
    "     <a style=\"position: absolute; right: 0;\" href=\"#\">\n"
    "         <small>Back to top ‚Üë</small>\n"
    "     </a>\n"
    " </div>\n"
).
-spec bg_colour(binary(), gleam_community@colour:colour()) -> binary().
bg_colour(Text, Colour) ->
    Hex_colour = gleam_community@colour:to_rgb_hex(Colour),
    bg_hex(Text, Hex_colour).

-file("src/gleam_community/ansi.gleam", 2357).
?DOC(
    " This is an alias for [`bg_colour`](#bg_colour) for those who prefer the American English\n"
    " spelling.\n"
).
-spec bg_color(binary(), gleam_community@colour:colour()) -> binary().
bg_color(Text, Colour) ->
    bg_colour(Text, Colour).
